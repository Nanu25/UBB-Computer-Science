@* filepath: Views/Logs/Index.cshtml *@
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var token = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}
<h1>Log Reports</h1>

<div class="row mb-3">
    <div class="col">
        <label for="type">Type:</label>
        <input type="text" id="type" class="form-control" />
    </div>
    
    <div class="col">
        <label for="severity">Severity:</label>
        <select id="severity" class="form-control">
            <option value="">All</option>
            <option value="debug">Debug</option>
            <option value="warning">Warning</option>
            <option value="notice">Notice</option>
            <option value="error">Error</option>
            <option value="critical">Critical</option>
        </select>
    </div>
    
    <div class="col">
        <div class="form-check">
            <input type="radio" id="my-logs" name="view" value="my" class="form-check-input" checked />
            <label for="my-logs" class="form-check-label">My Logs</label>
        </div>
        <div class="form-check">
            <input type="radio" id="all-logs" name="view" value="all" class="form-check-input" />
            <label for="all-logs" class="form-check-label">All Logs</label>
        </div>
    </div>
</div>

<table class="table" id="logs-table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Type</th>
            <th>Severity</th>
            <th>Date</th>
            <th>Message</th>
            <th>Priority</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<div class="d-flex justify-content-center">
    <button id="prev" class="btn btn-secondary mr-2">Previous</button>
    <span id="page-info" class="mt-2">Page 1</span>
    <button id="next" class="btn btn-secondary ml-2">Next</button>
</div>

<div class="mt-3">
    <a asp-action="Create" class="btn btn-primary">Add Log</a>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        
        function loadLogs() {
            const type = document.getElementById('type').value;
            const severity = document.getElementById('severity').value;
            const view = document.querySelector('input[name="view"]:checked').value;
            
            fetch(`/Logs/GetLogs?type=${type}&severity=${severity}&view=${view}&page=${currentPage}`)
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector('#logs-table tbody');
                    tbody.innerHTML = '';
                    
                    data.logs.forEach(log => {
                        const tr = document.createElement('tr');
                        const formattedDate = new Date(log.date).toLocaleString();
                        
                        let actionsHtml = '';
                        if (log.isOwner) {
                            actionsHtml = `
                                <a href="/Logs/Edit/${log.logId}" class="btn btn-sm btn-primary">Edit</a>
                                <button class="btn btn-sm btn-danger delete" data-id="${log.logId}">Delete</button>
                            `;
                        } else {
                            actionsHtml = '<span class="text-muted">N/A</span>';
                        }
                        
                        tr.innerHTML = `
                            <td>${log.logId}</td>
                            <td>${log.type}</td>
                            <td>${log.severity}</td>
                            <td>${formattedDate}</td>
                            <td>${log.message}</td>
                            <td>${log.priority}</td>
                            <td>${actionsHtml}</td>
                        `;
                        tbody.appendChild(tr);
                    });
                    
                    const totalPages = Math.ceil(data.totalCount / 4);
                    document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages || 1}`;
                    document.getElementById('prev').disabled = currentPage == 1;
                    document.getElementById('next').disabled = currentPage == totalPages || totalPages == 0;
                    
                    addDeleteListeners();
                });
        }
        
        function addDeleteListeners() {
            document.querySelectorAll('.delete').forEach(button => {
                button.addEventListener('click', function() {
                    const logId = this.dataset.id;
                    
                    if (confirm('Are you sure you want to delete this log?')) {
                        // Create a form dynamically
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = `/Logs/Delete/${logId}`;
                        
                        // Add anti-forgery token
                        const tokenField = document.createElement('input');
                        tokenField.type = 'hidden';
                        tokenField.name = '__RequestVerificationToken';
                        tokenField.value = '@token';
                        form.appendChild(tokenField);
                        
                        // Add form to body and submit
                        document.body.appendChild(form);
                        
                        // Use fetch with FormData instead
                        fetch(form.action, {
                            method: 'POST',
                            body: new FormData(form),
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                loadLogs();
                            } else {
                                alert('Error deleting log');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error deleting log: ' + error.message);
                        })
                        .finally(() => {
                            // Clean up - remove the form
                            document.body.removeChild(form);
                        });
                    }
                });
            });
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            loadLogs();
            
            document.getElementById('type').addEventListener('input', () => {
                currentPage = 1;
                loadLogs();
            });
            
            document.getElementById('severity').addEventListener('change', () => {
                currentPage = 1;
                loadLogs();
            });
            
            document.querySelectorAll('input[name="view"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    currentPage = 1;
                    loadLogs();
                });
            });
            
            document.getElementById('prev').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    loadLogs();
                }
            });
            
            document.getElementById('next').addEventListener('click', () => {
                currentPage++;
                loadLogs();
            });
        });
    </script>
}