     1                                  global start
     2                                  
     3                                  bits 32
     4                                  
     5                                  extern scanf, fprintf, exit, fopen, fclose
     6                                  import scanf msvcrt.dll
     7                                  import fprintf msvcrt.dll
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  
    12                                  ;A file name and a text (defined in the data segment) are given. The text contains lowercase letters, digits and spaces.
    13                                  ; Replace all the digits on odd positions with the character ‘X’. Create the file with the given name and write
    14                                  ; the generated text to file.
    15                                  
    16                                  segment data use32 class = data
    17 00000000 6669732E74787400            file_name db "fis.txt", 0
    18 00000008 7700                        accsess_mode db "w", 0
    19 0000000A FFFFFFFF                    fd dd -1
    20 0000000E 00<rept>                    sir times 30 db 0
    21 0000002C 257300                      format_str db "%s", 0
    22 0000002F 00<rept>                    new_sir times 30 db 0
    23                                      
    24                                  segment code use32 class = code
    25                                  
    26                                      start:
    27 00000000 68[08000000]                push dword accsess_mode
    28 00000005 68[00000000]                push dword file_name
    29 0000000A FF15[00000000]              call [fopen]
    30 00000010 83C408                      add esp, 4 * 2
    31                                      
    32 00000013 83F800                      cmp eax, 0
    33 00000016 745D                        je eroare
    34 00000018 A3[0A000000]                mov dword [fd], eax
    35                                      
    36 0000001D 68[0E000000]                push dword sir
    37 00000022 68[2C000000]                push dword format_str
    38 00000027 FF15[00000000]              call [scanf]
    39 0000002D 83C408                      add esp, 4 * 2
    40                                      
    41 00000030 BE[0E000000]                mov esi, sir
    42 00000035 B900000000                  mov ecx, 0  ;the current position
    43 0000003A BF[2F000000]                mov edi, new_sir
    44                                      repeta:
    45 0000003F AC                              lodsb   ;al = byte[esi], esi++
    46 00000040 41                              inc ecx
    47                                          
    48 00000041 3C00                            cmp al, 0
    49 00000043 7417                            je end_repeta
    50                                          
    51 00000045 3C30                            cmp al, '0'
    52 00000047 7C10                            jl not_digit
    53                                          
    54 00000049 3C39                            cmp al, '9'
    55 0000004B 7F0C                            jg not_digit
    56                                          
    57 0000004D 89CB                            mov ebx, ecx
    58 0000004F 83E301                          and ebx, 1
    59 00000052 83FB01                          cmp ebx, 1
    60 00000055 7502                            jne not_even
    61                                          
    62 00000057 B058                            mov al, 'X'
    63                                          
    64                                          not_digit:
    65                                          not_even:
    66                                          
    67 00000059 AA                              stosb
    68 0000005A EBE3                            jmp repeta
    69                                          
    70                                      end_repeta:
    71 0000005C 68[2F000000]                push dword new_sir
    72 00000061 68[2C000000]                push dword format_str
    73 00000066 FF35[0A000000]              push dword [fd]
    74 0000006C FF15[00000000]              call [fprintf]
    75 00000072 83C40C                      add esp, 4 * 3
    76                                      
    77                                          
    78                                      eroare:
    79                                      
    80                                      
    81 00000075 6A00                        push dword 0
    82 00000077 FF15[00000000]              call [exit]
    83                                  
